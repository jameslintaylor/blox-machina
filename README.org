* Blocks

A Block consists of:
- ~prev-block~
- ~data~
- ~hash~

~prev-block~ refers to the hash of the previous block in the chain
~hash~ is the sha-1 hash of the concatenation of ~prev-block~ and ~data~

* Origin

The server/origin's responsibilities entail accepting new connections
from clients and keeping those clients bidirectionally synced with the
origin chain. Although it would be really awesome if this could be
decentralized, it isn't, and follows a client/server model where the
origin/server always holds the "master" chain.

All communication is done over a TCP socket, the spec of which follows:

** Websocket events

*** Client pushed blocks

#+BEGIN_SRC clojure results silent
  {:id :client/push-blocks :data {:blocks [...]}}
#+END_SRC

The origin should check the base of the ~:blocks~, if it is the same
as the head of the current chain, respond simply with the new
(confirmed) head of the origin chain: ~{:head hash}~

If the base of ~:blocks~ is different, rebase the pushed blocks onto
head of origin chain and respond with the rebased push: ~{:head
hash :rebased-blocks [...]}~

Here we are favouring some server computation over extra network
overhead (ie. if the server instead refused to accept the dangling
blocks and instead asked the client to pull before pushing).

*** Client wishes to pull blocks

#+BEGIN_SRC clojure results silent
  {:id :client/pull-blocks :data {:base :{hash}}}
#+END_SRC

The origin should respond with the blocks since ~:{hash}~. Commonly
new clients will request all blocks in the chain ie: ~{:base :gen}~

* Client

The client is much more complex than the server. It needs to deal with
disconnection (local branching) from the server, and when dealing with
aggregation of that data, (bidirectionally) syncing that aggregate
data with the chain.

The client's chain is broken up into 2 chains: the ~origin-chain~ and the
~local-chain~. 

- The ~origin-chain~ holds the client's last known state of the
  origin`s chain (ie. the last time they communicated).
- The ~local-chain~ holds all blocks the client has that are not yet
  known to the origin. It represents the client's "branching" from the
  origin chain.

#+begin_verse
*Implementation detail* - Whenever a block is put onto the local
chain, it should be pushed immediately to the server, unless there is
an outbound push still awaiting response (maybe network problems). If
there is already said outbound push, then the block remains in the
local chain until the outbound buffer is cleared. This represents the
only situation in which a client may push multiple blocks instead of a
single block, hence the reasoning for ~:client/push-blocks~ instead of
~:client/push-block~.
#+end_verse

** Websocket events

*** Server pushed blocks

#+BEGIN_SRC clojure results silent
  {:id :server/push-blocks :data {:blocks [...]}}
#+END_SRC

The client should check the base of the ~:blocks~ to ensure that it is
equal to the head of it's origin chain. This should be true most of
the time unless the client missed some previous push, in which case a
~:client/pull-blocks~ is in order. If the client's outbound buffer is
non-empty, the ongoing push is cancelled and the block is inserted at
the base of the local chain. If the client's local chain is non empty,
it is rebased onto the new head and the client continues in its
attempt to push those blocks to the origin.

* Tags

Commonly, the sequence of data obtained by traversing the blocks in a
chain is used to build some aggregate data. For example, if the block
~data~ were numbers, the aggregate could be the sum.

As such, it may be useful for the client to store versions of this
aggregate data at different states in the chain. This can be done to
yield some performance improvements. Commonly this involves storing at
least 2 tags, the genesis (usually "empty") state, and the state as of
the last branch from origin.
